//go:build generate
// +build generate

package main

//go:generate go run gen.go
//go:generate go fmt ./...

import (
	"fmt"
	"log"
	"os"
	"path/filepath"

	"golang.org/x/text/unicode/cldr"
)

const (
	filename = "/pkg/tables.go"
	pkg      = "money"
	header   = `// Generated by github.com/paulwerner/gomoney/gen. DO NOT EDIT.`
)

var cldrVersion = os.Getenv("CLDR_VERSION")

func init() {
	Init()
}

func main() {
	zip := openZip()
	defer zip.Close()
	_ = getCLDRData(zip)

	f := openFile()
	defer f.Close()
	genHeader(f)
}

func getCLDRData(f *os.File) *cldr.CLDR {
	dc := &cldr.Decoder{}
	cldrData, err := dc.DecodeZip(f)
	if err != nil {
		log.Fatalf("error decoding cldr core.zip: %v", err)
	}
	return cldrData
}

func openZip() *os.File {
	wd, err := os.Getwd()
	if err != nil {
		log.Fatalf("error opening working directory: %v", err)
	}

	zip, err := os.Open(filepath.Join(wd, "core.zip"))
	if err != nil {
		log.Fatalf("error opening core.zip file: %v", err)
	}
	return zip
}

func genHeader(f *os.File) {
	fmt.Fprint(f, header)
	fmt.Fprintln(f, "")
	fmt.Fprintf(f, "package %s", pkg)
	fmt.Fprintln(f, "")
	fmt.Fprintf(f, "var cldrVersion = %s", cldrVersion)
	fmt.Fprintln(f, "")
	fmt.Fprintln(f, "")
}

func openFile() *os.File {
	wd, err := os.Getwd()
	if err != nil {
		log.Fatalf("error opening working directory: %v", err)
	}
	fp := filepath.Join(wd, filename)
	f, err := os.Create(fp)
	if err != nil {
		log.Fatalf("error creating file: %s", fp)
	}
	return f
}

func Init() {
	log.SetPrefix("")
	log.SetFlags(log.Lshortfile)
}
